/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _utils = __webpack_require__(1);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _webuiPopoverConf = __webpack_require__(2);\n\nvar _webuiPopoverConf2 = _interopRequireDefault(_webuiPopoverConf);\n\nvar _selectors = __webpack_require__(3);\n\nvar _selectors2 = _interopRequireDefault(_selectors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar tableLayoutHTML = __webpack_require__(5);\nvar tableHeaderHTML = __webpack_require__(6);\n\n$.fn.timeSchedule = function (options) {\n    var defaults = {\n        rows: {},\n        startTime: \"07:00\",\n        endTime: \"19:30\",\n        widthTimeX: 25, // Width per cell (px)\n        widthTime: 600, // Separation time (sec)\n        timeLineY: 50, // timeline height(px)\n        timeLineBorder: 1, // timeline height border\n        timeBorder: 1, // border width\n        timeLinePaddingTop: 0,\n        timeLinePaddingBottom: 3,\n        headTimeBorder: 0, // time border width\n        dataWidth: 160, // data width\n        verticalScrollbar: 0, // vertical scrollbar width\n        resizeBorderWidth: 4, // Resize border width\n\n        // event\n        init_data: null,\n        change: null,\n        click: null,\n        append: null,\n        time_click: null,\n        debug: \"\" // debug selector\n    };\n\n    var setting = $.extend(defaults, options);\n    this.setting = setting;\n    var scheduleData = [];\n    var timelineData = [];\n    var $element = $(this);\n    var element = this;\n    var tableStartTime = Utils.calcStringTime(setting.startTime);\n    var tableEndTime = Utils.calcStringTime(setting.endTime);\n    var currentNode = null;\n    var editableNode = null;\n    var currentTime = null;\n    var currentTimeLeftBorder = null;\n\n    tableStartTime -= tableStartTime % setting.widthTime;\n    tableEndTime -= tableEndTime % setting.widthTime;\n\n    /**\n     * Return timeline data\n     * Public\n     * @returns {Array}\n     */\n    this.getTimelineData = function () {\n        return timelineData;\n    };\n\n    // Get the current timeline number\n    this.getTimeLineNumber = function (top) {\n        var num = 0;\n        var n = 0;\n        var tn = Math.ceil(top / (setting.timeLineY + setting.timeLinePaddingTop + setting.timeLinePaddingBottom));\n        setting.rows.forEach(function (val) {\n            var r = val;\n            var tr = 0;\n            if (_typeof(r[\"schedule\"]) == Object) {\n                tr = r[\"schedule\"].length;\n            }\n            if (currentNode && currentNode[\"timeline\"]) {\n                tr++;\n            }\n            n += Math.max(tr, 1);\n            if (n >= tn) {\n                return;\n            }\n            num++;\n        });\n\n        return num;\n    };\n\n    /**\n     * Add new event to timeline\n     * Public\n     * @param data\n     * @param {boolean} isManuallyNew if it was set manually\n     */\n    this.addNewEvent = function (data, isManuallyNew) {\n\n        var convertedData = {\n            \"timeline\": data.timeline || 0,\n            \"start\": Utils.calcStringTime(data.start),\n            \"end\": Utils.calcStringTime(data.end),\n            \"text\": data.text,\n            \"data\": data.data\n        };\n\n        this.addScheduleData(convertedData, isManuallyNew);\n    };\n\n    this.getBarTime = function ($bar) {\n        var sc_key = $bar.data('sc_key');\n        var x = $bar.position().left;\n        var w = $bar.width();\n        var startTime = tableStartTime + Math.floor(x / setting.widthTimeX) * setting.widthTime;\n        var endTime = tableStartTime + Math.floor((x + w) / setting.widthTimeX) * setting.widthTime;\n\n        return { startTime: startTime, endTime: endTime };\n    };\n\n    this.isEventCanBeMoved = function ($bar) {\n        var startTime = this.getBarTime($bar).startTime;\n        return startTime > currentTime;\n    };\n\n    /**\n     * Add new event with converted data\n     * @param data {object} Converted data (see this.addNewEvent)\n     * @param [isManuallyNew] {boolean}\n     * @returns {number}\n     */\n    this.addScheduleData = function (data) {\n        var isManuallyNew = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        var st = Math.ceil((data[\"start\"] - tableStartTime) / setting.widthTime);\n        var et = Math.floor((data[\"end\"] - tableStartTime) / setting.widthTime);\n        var $bar = $('<div class=\"sc_Bar\"><span class=\"head\"><span class=\"time\"></span></span><span class=\"text\"></span></div>');\n        var stext = Utils.formatTime(data[\"start\"]);\n        var etext = Utils.formatTime(data[\"end\"]);\n        var snum = data[\"timeline\"];\n        $bar.css({\n            left: st * setting.widthTimeX,\n            top: 0, //((snum * setting.timeLineY) + setting.timeLinePaddingTop), // это влияет на отступ блока внутри собственного таймлайна. тупо что он отличный был от нуля\n            width: (et - st) * setting.widthTimeX - setting.resizeBorderWidth, //\n            height: setting.timeLineY\n        });\n        $bar.find(\".time\").text(stext + \"-\" + etext);\n        if (data[\"text\"]) {\n            $bar.find(\".text\").text(data[\"text\"]);\n        }\n        if (data[\"class\"]) {\n            $bar.addClass(data[\"class\"]);\n        }\n        //$element.find('.sc_main').append($bar);\n        $element.find('.sc_main .timeline').eq(data[\"timeline\"]).append($bar);\n\n        // Add data\n        scheduleData.push(data);\n        // key\n        var key = scheduleData.length - 1;\n        $bar.data(\"sc_key\", key);\n\n        $bar.on(\"mouseup\", function (e) {\n            var $this = $(this);\n\n            if ($this.data(\"dragCheck\") !== true && $(this).data(\"resizeCheck\") !== true) {\n                var sc_key = $this.data(\"sc_key\");\n                var eventData = scheduleData[sc_key];\n\n                // Show this event settings\n                // showEventSettings($this, eventData); // TODO only when real click\n\n                // Run 'click' callback if it was set\n                if (typeof setting.click === 'function') {\n                    setting.click($this, eventData);\n                }\n            }\n        });\n\n        // Set event popover with it's settings\n        $bar.webuiPopover((0, _webuiPopoverConf2.default)($element));\n        if (isManuallyNew) {\n            editableNode = $bar;\n            $bar.webuiPopover('show');\n\n            $element.find(_selectors2.default.eventTitleInput).focus();\n        }\n\n        var $node = $element.find(\".sc_Bar\");\n        // move node.\n        $node.draggable({\n            grid: [setting.widthTimeX, 1],\n            containment: \".sc_main\",\n            helper: 'original',\n            start: function start(event, ui) {\n                var node = {};\n                node[\"node\"] = this;\n                node[\"offsetTop\"] = ui.position.top;\n                node[\"offsetLeft\"] = ui.position.left;\n                node[\"currentTop\"] = ui.position.top;\n                node[\"currentLeft\"] = ui.position.left;\n                node[\"timeline\"] = element.getTimeLineNumber(ui.position.top);\n                node[\"nowTimeline\"] = node[\"timeline\"];\n                currentNode = node;\n            },\n            drag: function drag(event, ui) {\n                $(this).data(\"dragCheck\", true);\n                if (!currentNode) {\n                    return false;\n                }\n                WebuiPopovers.hideAll();\n                var $moveNode = $(this);\n\n                var sc_key = $moveNode.data(\"sc_key\");\n                var originalTop = ui.originalPosition.top;\n                var originalLeft = ui.originalPosition.left;\n                var positionTop = ui.position.top;\n                var positionLeft = ui.position.left;\n                var timelineNum = element.getTimeLineNumber(ui.position.top);\n\n                // Uncomment if you want to get hard fixed position\n                //ui.position.top = Math.floor(ui.position.top / setting.timeLineY) * setting.timeLineY;\n\n                ui.position.left = Math.floor(ui.position.left / setting.widthTimeX) * setting.widthTimeX;\n\n                // min position by current time\n                if (ui.position.left <= currentTimeLeftBorder) {\n                    ui.position.left = currentTimeLeftBorder;\n                }\n\n                if (currentNode[\"nowTimeline\"] !== timelineNum) {\n                    currentNode[\"nowTimeline\"] = timelineNum;\n                }\n                currentNode[\"currentTop\"] = ui.position.top;\n                currentNode[\"currentLeft\"] = ui.position.left;\n                // Text change\n                element.rewriteBarText($moveNode, scheduleData[sc_key]);\n\n                return true;\n            },\n            // Processing after element movement has ended\n            stop: function stop(event, ui) {\n                $(this).data(\"dragCheck\", false);\n\n                currentNode = null;\n\n                var node = $(this);\n                var sc_key = node.data(\"sc_key\");\n                var x = node.position().left;\n                var w = node.width();\n\n                var start = tableStartTime + Math.floor(x / setting.widthTimeX) * setting.widthTime;\n                // let end = tableStartTime + (Math.floor((x + w) / setting.widthTimeX) * setting.widthTime);\n                var end = start + (scheduleData[sc_key][\"end\"] - scheduleData[sc_key][\"start\"]);\n\n                scheduleData[sc_key][\"start\"] = start;\n                scheduleData[sc_key][\"end\"] = end;\n                // Call back if callback is set\n                if (setting.change) {\n                    setting.change(node, scheduleData[sc_key]);\n                }\n            }\n        });\n\n        var self = this;\n        var lastSuccessfullWidth = null;\n        $node.resizable({\n            handles: 'e', // East (right) and West (left),\n            grid: [setting.widthTimeX, setting.timeLineY],\n            minWidth: setting.widthTimeX,\n            start: function start(event, ui) {\n                var $node = $(this);\n                if (ui.position.left <= currentTimeLeftBorder && event.toElement.matches('.ui-resizable-w')) {\n                    $node.trigger('mouseup');\n                    event.preventDefault();\n                    $node.data(\"resizeCheck\", false);\n                    $node.removeClass('ui-resizable-resizing');\n                    return false;\n                }\n\n                $node.data(\"resizeCheck\", true);\n            },\n            resize: function resize(event, ui) {\n                // let $node = $(this);\n                // if (ui.position.left <= currentTimeLeftBorder\n                //     && ($(event.toElement).position().left <= ui.position.left && !$(event.toElement).is('span.text')))  {\n                //\n                //     ui.position.left = currentTimeLeftBorder;\n                //     ui.size.width = lastSuccessfullWidth;\n                //     $node.data(\"resizeCheck\", false);\n                //     $node.removeClass('ui-resizable-resizing');\n                //     $node.trigger('mouseup');\n                //     return false;\n                // }\n                //\n                // lastSuccessfullWidth = ui.size.width;\n            },\n            // Processing after element movement has ended\n            stop: function stop(event, ui) {\n                var node = $(this);\n\n                var sc_key = node.data(\"sc_key\");\n                var x = node.position().left;\n                var w = node.width();\n                var start = tableStartTime + Math.floor(x / setting.widthTimeX) * setting.widthTime;\n                var end = tableStartTime + Math.floor((x + w) / setting.widthTimeX) * setting.widthTime;\n                var timelineNum = scheduleData[sc_key][\"timeline\"];\n\n                scheduleData[sc_key][\"start\"] = start;\n                scheduleData[sc_key][\"end\"] = end;\n\n                // Height adjustment\n                element.resetBarPosition(timelineNum);\n                // Text change\n                element.rewriteBarText(node, scheduleData[sc_key]);\n\n                node.data(\"resizeCheck\", false);\n                // Call back if callback is set\n                if (setting.change) {\n                    setting.change(node, scheduleData[sc_key]);\n                }\n            }\n        });\n        return key;\n    };\n\n    // Acquire schedule number\n    this.getScheduleCount = function (n) {\n        var num = 0;\n        for (var i in scheduleData) {\n            if (scheduleData[i][\"timeline\"] == n) {\n                num++;\n            }\n        }\n        return num;\n    };\n\n    /**\n     * Show settings for an event and set title\n     * @param $bar {object} jQuery element\n     * @param eventData {event} Event Data\n     */\n    function showEventSettings($bar, eventData) {\n        editableNode = $bar;\n        $bar.webuiPopover('show');\n        $element.find(_selectors2.default.eventTitleInput).val(eventData.text);\n    }\n\n    // add\n    this.addRow = function (timeline, row) {\n        var _this = this;\n\n        var title = row[\"title\"];\n        var id = $element.find('.sc_main .timeline').length;\n\n        var html = void 0;\n\n        html = '';\n        html += '<div class=\"timeline\"><span>' + title + '</span></div>';\n        var $data = $(html);\n        // event call\n        if (setting.init_data) {\n            setting.init_data($data, row);\n        }\n        $element.find('.sc_data_scroll').append($data);\n\n        html = '';\n        html += '<div class=\"timeline\"></div>';\n\n        var $timeline = $(html);\n        $timeline.data('timeline-number', id);\n\n        for (var t = tableStartTime; t < tableEndTime; t += setting.widthTime) {\n            var $tl = $('<div class=\"tl\"></div>');\n            $tl.width(setting.widthTimeX - setting.timeBorder);\n\n            $tl.data(\"time\", Utils.formatTime(t));\n            $tl.data(\"timeline\", timeline);\n            $timeline.append($tl);\n        }\n\n        //\n        // Timeline events\n        //\n\n        var $tlItem = $timeline.find(\".tl\"); // TODO в пределах всего виджета а не толко таймлайна\n        var lastMovedTarget = null;\n        var $startEl = null;\n\n        $tlItem.on('mousedown', function () {\n            if (!$startEl) {\n                var $this = $(this);\n                // Hide all event popovers\n                WebuiPopovers.hideAll();\n\n                if (!$this.is('.create-disabled')) {\n                    $startEl = $this;\n                    $tlItem.removeClass('marked-for-new-event');\n                    $startEl.addClass('marked-for-new-event');\n                }\n            }\n        }).on('mouseup', function () {\n            if ($startEl) {\n                $startEl = null;\n\n                var $selectedTimeItems = $timeline.find('.tl.marked-for-new-event');\n                if ($selectedTimeItems.size()) {\n                    $tlItem.removeClass('marked-for-new-event');\n\n                    var startTime = $selectedTimeItems.first().data('time');\n                    var preEndTime = $selectedTimeItems.last().data('time'); //cuz this start of the element time\n                    var endTime = Utils.nextTenMinutes(preEndTime);\n\n                    _this.addNewEvent({\n                        start: startTime,\n                        end: endTime,\n                        timeline: $timeline.data('timeline-number')\n                    }, true); // with \"true\" will show event settings popover\n                }\n            }\n        });\n\n        $tlItem.on('mousemove', function (e) {\n            // mouse move while clicked right mouse btn\n            if (e.buttons === 1 && lastMovedTarget !== e.target) {\n                var $this = $(this);\n\n                if (!$startEl || $this.is('.create-disabled')) {\n                    return; //if user are resizing an event bar (bcuz it also mousedown + mousemove)\n                }\n\n                lastMovedTarget = e.target; // cuz it doesn't work with $this\n\n                var $elementsForSelect = void 0;\n                var elementPosition = Utils.docPosition($this, $startEl);\n\n                if (elementPosition === 'before') {\n                    $elementsForSelect = $startEl.nextUntil($this);\n                } else if (elementPosition === 'after') {\n                    $elementsForSelect = $startEl.prevUntil($this);\n                }\n\n                if ($elementsForSelect) {\n                    $tlItem.removeClass('marked-for-new-event');\n                    $elementsForSelect.addClass('marked-for-new-event');\n                }\n                $startEl.addClass('marked-for-new-event');\n                $this.addClass('marked-for-new-event');\n            } else if (e.buttons === 0) {\n                if ($startEl) {\n                    $startEl = null;\n                    $tlItem.removeClass('marked-for-new-event');\n                }\n            }\n        });\n\n        // click event\n        if (setting.time_click) {\n            $tlItem.on('click', function () {\n                // regular click\n                setting.time_click(this, $(this).data(\"time\"), $(this).data(\"timeline\"), timelineData[$(this).data(\"timeline\")]);\n            });\n        }\n\n        $element.find('.sc_main').append($timeline);\n\n        timelineData[timeline] = row;\n\n        if (row[\"class\"] && row[\"class\"] != \"\") {\n            $element.find('.sc_data .timeline').eq(id).addClass(row[\"class\"]);\n            $element.find('.sc_main .timeline').eq(id).addClass(row[\"class\"]);\n        }\n\n        // Schedule timeline\n        if (row[\"schedule\"]) {\n            for (var i in row[\"schedule\"]) {\n                var bdata = row[\"schedule\"][i];\n                var s = Utils.calcStringTime(bdata[\"start\"]);\n                var e = Utils.calcStringTime(bdata[\"end\"]);\n\n                var data = {};\n                data[\"timeline\"] = id;\n                data[\"start\"] = s;\n                data[\"end\"] = e;\n                if (bdata[\"text\"]) {\n                    data[\"text\"] = bdata[\"text\"];\n                }\n                data[\"data\"] = {};\n                if (bdata[\"data\"]) {\n                    data[\"data\"] = bdata[\"data\"];\n                }\n                element.addScheduleData(data);\n            }\n        }\n\n        // Adjust height\n        element.resetBarPosition(id);\n        $element.find('.sc_main .timeline').eq(id).droppable({\n            accept: \".sc_Bar\",\n            drop: function drop(ev, ui) {\n                var node = ui.draggable;\n                var sc_key = node.data(\"sc_key\");\n                var nowTimelineNum = scheduleData[sc_key][\"timeline\"];\n                var timelineNum = $element.find('.sc_main .timeline').index(this);\n                // change timeline\n                scheduleData[sc_key][\"timeline\"] = timelineNum;\n                node.appendTo(this);\n                // Height adjustment\n                element.resetBarPosition(nowTimelineNum);\n                element.resetBarPosition(timelineNum);\n            }\n        });\n\n        // Call back if callback is set\n        if (setting.append) {\n            $element.find('.sc_main .timeline').eq(id).find(\".sc_Bar\").each(function () {\n                var node = $(this);\n                var sc_key = node.data(\"sc_key\");\n                setting.append(node, scheduleData[sc_key]);\n            });\n        }\n    };\n\n    /**\n     * Return schedule data\n     * Public\n     * @returns {Array}\n     */\n    this.getScheduleData = function () {\n        var data = [];\n\n        for (var i in timelineData) {\n            if (typeof timelineData[i] == \"undefined\") continue;\n            var timeline = $.extend(true, {}, timelineData[i]);\n            timeline.schedule = [];\n            data.push(timeline);\n        }\n\n        for (var _i in scheduleData) {\n            if (typeof scheduleData[_i] == \"undefined\") continue;\n            var schedule = $.extend(true, {}, scheduleData[_i]);\n            schedule.start = Utils.formatTime(schedule.start);\n            schedule.end = Utils.formatTime(schedule.end);\n            var timelineIndex = schedule.timeline;\n            delete schedule.timeline;\n            data[timelineIndex].schedule.push(schedule);\n        }\n\n        return data;\n    };\n\n    // Change text\n    this.rewriteBarText = function (node, data) {\n        var x = node.position().left;\n        var w = node.width();\n        var start = tableStartTime + Math.floor(x / setting.widthTimeX) * setting.widthTime;\n        //let end = tableStartTime + (Math.floor((x + w) / setting.widthTimeX) * setting.widthTime);\n        var end = start + (data[\"end\"] - data[\"start\"]);\n        var html = Utils.formatTime(start) + \"-\" + Utils.formatTime(end);\n        $(node).find(\".time\").html(html);\n    };\n    this.resetBarPosition = function (n) {\n        // reorder elements\n        var $bar_list = $element.find('.sc_main .timeline').eq(n).find(\".sc_Bar\");\n        var codes = [];\n        for (var i = 0; i < $bar_list.length; i++) {\n            codes[i] = { code: i, x: $($bar_list[i]).position().left };\n        }\n\n        // Sort\n        codes.sort(function (a, b) {\n            if (a[\"x\"] < b[\"x\"]) {\n                return -1;\n            } else if (a[\"x\"] > b[\"x\"]) {\n                return 1;\n            }\n            return 0;\n        });\n        var check = [];\n        var h = 0;\n        var $e1 = void 0,\n            $e2 = void 0;\n        var c1 = void 0,\n            c2 = void 0;\n        var s1 = void 0,\n            e1 = void 0,\n            s2 = void 0,\n            e2 = void 0;\n        for (var _i2 = 0; _i2 < codes.length; _i2++) {\n            c1 = codes[_i2][\"code\"];\n            $e1 = $($bar_list[c1]);\n            for (h = 0; h < check.length; h++) {\n                var next = false;\n                L: for (var j = 0; j < check[h].length; j++) {\n                    c2 = check[h][j];\n                    $e2 = $($bar_list[c2]);\n\n                    s1 = $e1.position().left;\n                    e1 = $e1.position().left + $e1.width();\n                    s2 = $e2.position().left;\n                    e2 = $e2.position().left + $e2.width();\n                    if (s1 < e2 && e1 > s2) {\n                        next = true;\n                        continue L;\n                    }\n                }\n                if (!next) {\n                    break;\n                }\n            }\n            if (!check[h]) {\n                check[h] = [];\n            }\n            $e1.css({ top: h * setting.timeLineY + setting.timeLinePaddingTop });\n            check[h][check[h].length] = c1;\n        }\n        // Adjust height\n        this.resizeRow(n, check.length);\n    };\n    this.resizeRow = function (n, height) {\n        //let h = Math.max(element.getScheduleCount(n),1);\n        var h = Math.max(height, 1);\n        $element.find('.sc_data .timeline').eq(n).height(h * setting.timeLineY - setting.timeLineBorder + setting.timeLinePaddingTop + setting.timeLinePaddingBottom);\n        $element.find('.sc_main .timeline').eq(n).height(h * setting.timeLineY - setting.timeLineBorder + setting.timeLinePaddingTop + setting.timeLinePaddingBottom);\n\n        $element.find('.sc_main .timeline').eq(n).find(\".sc_bgBar\").each(function () {\n            $(this).height($(this).closest(\".timeline\").height());\n        });\n\n        $element.find(\".sc_data\").height($element.find(\".sc_main_box\").height());\n    };\n    // resizeWindow\n    this.resizeWindow = function () {\n        var sc_width = $element.width();\n        var sc_main_width = sc_width - setting.dataWidth - setting.verticalScrollbar;\n        var cell_num = Math.floor((tableEndTime - tableStartTime) / setting.widthTime);\n        $element.find(\".sc_header_cell\").width(setting.dataWidth);\n        $element.find(\".sc_data,.sc_data_scroll\").width(setting.dataWidth);\n        $element.find(\".sc_header\").width(sc_main_width);\n        $element.find(\".sc_main_box\").width(sc_main_width);\n        $element.find(\".sc_header_scroll\").width(setting.widthTimeX * cell_num);\n        $element.find(\".sc_main_scroll\").width(setting.widthTimeX * cell_num);\n    };\n\n    /**\n     * Start point\n     */\n    this.init = function () {\n        this.renderData();\n        this.changeEventHandler();\n        this.showCurrentTimeProgress();\n    };\n\n    this.renderData = function () {\n        $element.append(tableLayoutHTML);\n\n        $element.find(\".sc_main_box\").scroll(function () {\n            $element.find(\".sc_data_scroll\").css(\"top\", $(this).scrollTop() * -1);\n            $element.find(\".sc_header_scroll\").css(\"left\", $(this).scrollLeft() * -1);\n        });\n\n        // add time cell\n        var cell_num = Math.floor((tableEndTime - tableStartTime) / setting.widthTime);\n        var before_time = -1;\n        for (var t = tableStartTime; t < tableEndTime; t += setting.widthTime) {\n\n            if (before_time < 0 || Math.floor(before_time / 3600) != Math.floor(t / 3600)) {\n\n                var $time = $(tableHeaderHTML.replace('{{formatTime}}', Utils.formatTime(t)));\n                var _cell_num = Math.floor(Number(Math.min(Math.ceil((t + setting.widthTime) / 3600) * 3600, tableEndTime) - t) / setting.widthTime);\n                $time.width(_cell_num * setting.widthTimeX - setting.headTimeBorder);\n                $element.find(\".sc_header_scroll\").append($time);\n\n                before_time = t;\n            }\n        }\n\n        $(window).resize(function () {\n            element.resizeWindow();\n        }).trigger(\"resize\");\n\n        // addrow\n\n        setting.rows.forEach(function (val, i) {\n            this.addRow(i, val);\n        }.bind(this));\n    };\n\n    this.changeEventHandler = function () {\n        $element.on('submit', _selectors2.default.eventChangeForm, function (e) {\n            e.preventDefault();\n\n            if (editableNode) {\n                var dataToSave = Utils.serializeObject($(this)); // заголовок - поле title\n                var sc_key = editableNode.data(\"sc_key\");\n                var eventData = scheduleData[sc_key];\n                if (!eventData) {\n                    throw new Error('Editable event not found');\n                }\n                eventData.text = dataToSave.title;\n\n                // Update memory data\n                scheduleData[sc_key] = eventData;\n\n                // Update UI data\n                editableNode.find('.text').text(eventData.text);\n\n                // Hide event settings\n                editableNode.webuiPopover('hide');\n\n                editableNode = null;\n            } else {\n                throw new Error('Editable node not specified');\n            }\n        });\n\n        $element.on('click', _selectors2.default.eventDeleteBtn, function () {\n            var sc_key = editableNode.data(\"sc_key\");\n            delete scheduleData[sc_key]; // delete will save keys\n\n            // Hide settings popover\n            editableNode.webuiPopover('hide');\n\n            // Delete from UI\n            editableNode.off();\n            editableNode.remove();\n\n            editableNode = null;\n        });\n    };\n\n    this.showCurrentTimeProgress = function () {\n        var date = new Date();\n        var hours = 10 || date.getHours(); // TODO\n        var minutes = 32 || date.getMinutes(); // TODO\n\n        currentTime = Utils.calcStringTime(hours + ':' + (minutes - minutes % 10));\n\n        var startHour = +setting.startTime.split(':')[0];\n        var fullRowsCount = hours - startHour;\n        var fullCellsCount = fullRowsCount * 6 + (minutes - minutes % 10) / 10; // one time row contains 6 time cells\n        var minutePercentage = minutes / 60 * 100;\n\n        currentTimeLeftBorder = fullCellsCount * 25; // 25 - cell width\n\n        var $rows = $element.find('.sc_time');\n        for (var i = 0; i < fullRowsCount; i++) {\n            $rows.eq(i).addClass('past-time');\n        }\n\n        $rows.eq(fullRowsCount).append('<div class=\"minutes-percentage\"></div>').find('.minutes-percentage').width(minutePercentage + '%');\n\n        var $timelines = $element.find('.timeline.ui-droppable');\n        $timelines.each(function () {\n            var $timeCells = $(this).find('.tl');\n\n            for (var _i3 = 0; _i3 < fullCellsCount; _i3++) {\n                $timeCells.eq(_i3).addClass('create-disabled');\n            }\n        });\n    };\n\n    // Initialization\n    this.init();\n\n    this.debug = function () {\n        var html = '';\n\n        var _loop = function _loop(i) {\n            var propsString = Object.keys(scheduleData[i]).map(function (k) {\n                return k + ': ' + scheduleData[i][k] + ' ';\n            }).join(' ');\n            html += '<div style=\"font-size: smaller\">[' + i + '] ' + propsString + '</div>';\n        };\n\n        for (var i in scheduleData) {\n            _loop(i);\n        }\n        $(setting.debug).html(html);\n    };\n    if (setting.debug && setting.debug != \"\") {\n        setInterval(function () {\n            element.debug();\n        }, 500);\n    }\n\n    return this;\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0\n//# sourceURL=webpack:///./src/index.js?");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.calcStringTime = calcStringTime;\nexports.nextTenMinutes = nextTenMinutes;\nexports.formatTime = formatTime;\nexports.docPosition = docPosition;\nexports.serializeObject = serializeObject;\nfunction calcStringTime(string) {\n    var slice = string.split(':');\n    var h = Number(slice[0]) * 60 * 60;\n    var i = Number(slice[1]) * 60;\n    var min = h + i;\n\n    return min;\n}\n\nfunction nextTenMinutes(timeString) {\n    return formatTime(calcStringTime(timeString) + 600);\n}\n\nfunction formatTime(min) {\n    var h = \"\" + (min / 36000 | 0) + (min / 3600 % 10 | 0);\n    var i = \"\" + (min % 3600 / 600 | 0) + (min % 3600 / 60 % 10 | 0);\n    var string = h + \":\" + i;\n\n    return string;\n}\n\nfunction docPosition(element1, element2) {\n    if (element1.jquery) element1 = element1[0];\n    if (element2.jquery) element2 = element2[0];\n\n    var position = element1.compareDocumentPosition(element2);\n\n    if (position & 0x04) {\n        return 'after';\n    }\n    if (position & 0x02) {\n        return 'before';\n    }\n}\n\nfunction serializeObject($form) {\n    var o = {};\n    var a = $form.serializeArray();\n    $.each(a, function () {\n        if (o[this.name] !== undefined) {\n            if (!o[this.name].push) {\n                o[this.name] = [o[this.name]];\n            }\n            o[this.name].push(this.value || '');\n        } else {\n            o[this.name] = this.value || '';\n        }\n    });\n    return o;\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 1\n// module chunks = 0\n//# sourceURL=webpack:///./src/utils.js?");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = getConfig;\n\nvar _selectors = __webpack_require__(3);\n\nvar _selectors2 = _interopRequireDefault(_selectors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar webuiPopoverHTML = __webpack_require__(4);\n\nfunction getConfig($container) {\n    return {\n        container: $container || document.body,\n        content: webuiPopoverHTML,\n        trigger: 'manual',\n        animation: 'fade',\n        closeable: true,\n        multi: false,\n        dismissible: true,\n        width: 300,\n\n        onShow: function onShow($element) {},\n\n        onHide: function onHide($element) {\n            $element.find(_selectors2.default.eventTitleInput).val('');\n        }\n    };\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/webui-popover-conf.js\n// module id = 2\n// module chunks = 0\n//# sourceURL=webpack:///./src/webui-popover-conf.js?");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar SELECTORS = {\n  eventChangeForm: '.js-event-edit-form',\n  eventSaveBtn: '.js-event-save-button',\n  eventDeleteBtn: '.js-event-delete-button',\n  eventTitleInput: '.js-event-title-input'\n};\nObject.freeze(SELECTORS);\n\nexports.default = SELECTORS;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/selectors.js\n// module id = 3\n// module chunks = 0\n//# sourceURL=webpack:///./src/selectors.js?");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("module.exports = \"<form class=\\\"event-edit-form js-event-edit-form\\\">\\n    <label for=\\\"event-title\\\">Заголовок события</label>\\n    <input type=\\\"text\\\" class=\\\"event-title-input js-event-title-input\\\"\\n           id=\\\"event-title\\\"\\n           name=\\\"title\\\"\\n           placeholder=\\\"Заголовок\\\">\\n\\n    <button class=\\\"event-save-button js-event-save-button\\\" type=\\\"submit\\\">Сохранить</button>\\n    <button class=\\\"event-delete-button js-event-delete-button\\\" type=\\\"button\\\">Удалить</button>\\n</form>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/templates/webui-popover.html\n// module id = 4\n// module chunks = 0\n//# sourceURL=webpack:///./src/templates/webui-popover.html?");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"sc_menu\\\">\\n    <div class=\\\"sc_header\\\">\\n        <div class=\\\"sc_header_scroll\\\">\\n        </div>\\n    </div>\\n    <br class=\\\"clear\\\"/>\\n</div>\\n<div class=\\\"sc_wrapper\\\">\\n    <div class=\\\"sc_data\\\">\\n        <div class=\\\"sc_data_scroll\\\">\\n        </div>\\n    </div>\\n    <div class=\\\"sc_main_box\\\">\\n        <div class=\\\"sc_main_scroll\\\">\\n            <div class=\\\"sc_main\\\">\\n            </div>\\n        </div>\\n    </div>\\n    <br class=\\\"clear\\\"/>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/templates/table-layout.html\n// module id = 5\n// module chunks = 0\n//# sourceURL=webpack:///./src/templates/table-layout.html?");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"sc_time\\\">\\n    <div class=\\\"time-data\\\">\\n        <div>{{formatTime}}</div>\\n        <span>00</span><span>10</span><span>20</span><span>30</span><span>40</span><span>50</span>\\n    </div>\\n</div>\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/templates/table-header.html\n// module id = 6\n// module chunks = 0\n//# sourceURL=webpack:///./src/templates/table-header.html?");

/***/ }
/******/ ]);